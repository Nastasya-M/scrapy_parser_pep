number,name,status
1,PEP Purpose and Guidelines,
101,Doing Python Releases 101,
100,Python Unicode Integration,
160,Python 1.6 Release Schedule,
200,Python 2.0 Release Schedule,
202,List Comprehensions,
20,The Zen of Python,
103,Collecting information about git,
42,Feature Requests,
102,Doing Python Micro Releases,
13,Python Language Governance,
10,Voting Guidelines,
11,CPython platform support,
12,Sample reStructuredText PEP Template,
201,Lockstep Iteration,
8104,2023 Term Steering Council election,
8000,Python Language Governance Proposal Overview,
8103,2022 Term Steering Council election,
8002,Open Source Governance Survey,
8102,2021 Term Steering Council election,
8013,The External Council Governance Model,
8001,Python Governance Voting Process,
8101,2020 Term Steering Council election,
8015,Organization of the Python community,
8016,The Steering Council Model,
8100,January 2019 Steering Council election,
8011,Python Governance Model Lead by Trio of Pythonistas,
8014,The Commons Governance Model,
8012,The Community Governance Model,
8010,The Technical Leader Governance Model,
3155,Qualified name for classes and functions,
3156,Asynchronous IO Support Rebooted: the “asyncio” Module,
3154,Pickle protocol version 4,
3152,Cofunctions,
3333,Python Web Server Gateway Interface v1.0.1,
3153,Asynchronous IO support,
3151,Reworking the OS and IO exception hierarchy,
2,Procedure for Adding New Modules,
3149,ABI version tagged .so files,
3148,futures - execute computations asynchronously,
3147,PYC Repository Directories,
3150,Statement local namespaces (aka “given” clause),
3146,Merging Unladen Swallow into CPython,
3145,Asynchronous I/O For subprocess.Popen,
3144,IP Address Manipulation Library for the Python Standard Library,
3143,Standard daemon process library,
3142,Add a “while” clause to generator expressions,
3139,Cleaning out sys and the “interpreter” module,
3140,"str(container) should call str(item), not repr(item)",
3138,String representation in Python 3000,
3137,Immutable Bytes and Mutable Buffer,
3141,A Type Hierarchy for Numbers,
3132,Extended Iterable Unpacking,
3133,Introducing Roles,
3134,Exception Chaining and Embedded Tracebacks,
3131,Supporting Non-ASCII Identifiers,
3136,Labeled break and continue,
3129,Class Decorators,
3128,BList: A Faster List-like Type,
3130,Access to Current Module/Class/Function,
3135,New Super,
3127,Integer Literal Support and Syntax,
3126,Remove Implicit String Concatenation,
3125,Remove Backslash Continuation,
3122,Delineation of the main module,
3123,Making PyObject_HEAD conform to standard C,
3118,Revising the buffer protocol,
3121,Extension Module Initialization and Finalization,
3115,Metaclasses in Python 3000,
3120,Using UTF-8 as the default source encoding,
3116,New I/O,
3114,Renaming iterator.next() to iterator.__next__(),
3117,Postfix type declarations,
3113,Removal of Tuple Parameter Unpacking,
3119,Introducing Abstract Base Classes,
3124,"Overloading, Generic Functions, Interfaces, and Adaptation",
3111,Simple input built-in in Python 3000,
3110,Catching Exceptions in Python 3000,
3112,Bytes literals in Python 3000,
3109,Raising Exceptions in Python 3000,
3107,Function Annotations,
3108,Standard Library Reorganization,
3106,"Revamping dict.keys(), .values() and .items()",
3102,Keyword-Only Arguments,
3105,Make print a function,
3104,Access to Names in Outer Scopes,
3103,A Switch/Case Statement,
3099,Things that will Not Change in Python 3000,
3100,Miscellaneous Python 3.0 Plans,
3101,Advanced String Formatting,
3002,Procedure for Backwards-Incompatible Changes,
3003,Python Language Moratorium,
3001,Procedure for reviewing and improving standard library modules,
3000,Python 3000,
754,IEEE 754 Floating Point Special Values,
801,Reserved,
721,Using tarfile.data_filter for source distribution extraction,
718,Subscriptable functions,
719,Python 3.13 Release Schedule,
720,Cross-compiling Python packages,
713,Callable Modules,
714,Rename dist-info-metadata in the Simple API,
712,Adding a “converter” parameter to dataclasses.field,
715,Disabling bdist_egg distribution uploads on PyPI,
710,Recording the provenance of installed packages,
707,A simplified signature for __exit__ and __aexit__,
708,Extending the Repository API to Mitigate Dependency Confusion Attacks,
711,PyBI: a standard format for distributing Python Binaries,
706,Filter for tarfile.extractall,
704,Require virtual environments by default for package installers,
709,Inlined comprehensions,
702,Marking deprecations using the type system,
700,Additional Fields for the Simple API for Package Indexes,
705,TypedMapping: Type Hints for Mappings with a Fixed Set of Keys,
703,Making the Global Interpreter Lock Optional in CPython,
699,Remove private dict version field added in PEP 509,
698,Override Decorator for Static Typing,
701,Syntactic formalization of f-strings,
697,Limited C API for Extending Opaque Types,
696,Type defaults for TypeVarLikes,
695,Type Parameter Syntax,
693,Python 3.12 Release Schedule,
694,Upload 2.0 API for Python Package Repositories,
691,JSON-based Simple API for Python Package Indexes,
692,Using TypedDict for more precise **kwargs typing,
689,Unstable C API tier,
690,Lazy Imports,
688,Making the buffer protocol accessible in Python,
687,Isolating modules in the standard library,
685,Comparison of extra names for optional distribution dependencies,
686,Make UTF-8 mode default,
682,Format Specifier for Signed Zero,
684,A Per-Interpreter GIL,
679,Allow parentheses in assert statements,
683,"Immortal Objects, Using a Fixed Refcount",
680,tomllib: Support for Parsing TOML in the Standard Library,
681,Data Class Transforms,
676,PEP Infrastructure Process,
678,Enriching Exceptions with Notes,
677,Callable Type Syntax,
674,Disallow using macros as l-values,
673,Self Type,
672,Unicode-related Security Considerations for Python,
675,Arbitrary Literal String Type,
670,Convert macros to functions in the Python C API,
671,Syntax for late-bound function argument defaults,
669,Low Impact Monitoring for CPython,
667,Consistent views of namespaces,
668,Marking Python base environments as “externally managed”,
666,Reject Foolish Indentation,
665,A file format to list Python dependencies for reproducibility of an application,
663,"Standardizing Enum str(), repr(), and format() behaviors",
664,Python 3.11 Release Schedule,
662,Editable installs via virtual wheels,
661,Sentinel Values,
660,Editable installs for pyproject.toml based builds (wheel based),
656,Platform Tag for Linux Distributions Using Musl,
659,Specializing Adaptive Interpreter,
657,Include Fine Grained Error Locations in Tracebacks,
658,Serve Distribution Metadata in the Simple Repository API,
654,Exception Groups and except*,
655,Marking individual TypedDict items as required or potentially-missing,
652,Maintaining the Stable ABI,
653,Precise Semantics for Pattern Matching,
648,Extensible customizations of the interpreter at startup,
651,Robust Stack Overflow Handling,
649,Deferred Evaluation Of Annotations Using Descriptors,
645,Allow writing optional types as,
647,User-Defined Type Guards,
644,Require OpenSSL 1.1.1 or newer,
650,Specifying Installer Requirements for Python Projects,
640,Unused variable syntax,
641,Using an underscore in the version portion of Python 3.10 compatibility tags,
646,Variadic Generics,
643,Metadata for Package Source Distributions,
638,Syntactic Macros,
642,Explicit Pattern Syntax for Structural Pattern Matching,
639,Improving License Clarity with Better Package Metadata,
637,Support for indexing with keyword arguments,
636,Structural Pattern Matching: Tutorial,
634,Structural Pattern Matching: Specification,
635,Structural Pattern Matching: Motivation and Rationale,
633,Dependency specification in pyproject.toml using an exploded TOML table,
630,Isolating Extension Modules,
631,Dependency specification in pyproject.toml based on PEP 508,
632,Deprecate distutils module,
628,Add,
629,Versioning PyPI’s Simple API,
627,Recording installed projects,
624,Remove Py_UNICODE encoder APIs,
623,Remove wstr from Unicode,
625,Filename of a Source Distribution,
626,Precise line numbers for debugging and other tools.,
620,Hide implementation details from the C API,
621,Storing project metadata in pyproject.toml,
618,Add Optional Length-Checking To zip,
616,String methods to remove prefixes and suffixes,
617,New PEG parser for CPython,
615,Support for the IANA Time Zone Database in the Standard Library,
613,Explicit Type Aliases,
622,Structural Pattern Matching,
614,Relaxing Grammar Restrictions On Decorators,
611,The one million limit,
610,Recording the Direct URL Origin of installed distributions,
619,Python 3.10 Release Schedule,
612,Parameter Specification Variables,
609,Python Packaging Authority (PyPA) Governance,
608,Coordinated Python release,
607,Reducing CPython’s Feature Delivery Latency,
606,Python Compatibility Version,
605,A rolling feature release stream for CPython,
599,The manylinux2014 Platform Tag,
603,Adding a frozenmap type to collections,
601,Forbid return/break/continue breaking out of finally,
600,Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,
602,Annual Release Cycle for Python,
596,Python 3.9 Release Schedule,
597,Add optional EncodingWarning,
595,Improving bugs.python.org,
604,Allow writing union types as,
594,Removing dead batteries from the standard library,
598,Introducing incremental feature releases,
592,Adding “Yank” Support to the Simple API,
593,Flexible function and variable annotations,
590,Vectorcall: a fast calling protocol for CPython,
591,Adding a final qualifier to typing,
585,Type Hinting Generics In Standard Collections,
588,GitHub Issues Migration Plan,
586,Literal Types,
587,Python Initialization Configuration,
589,TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,
580,The C call protocol,
584,Add Union Operators To dict,
582,Python local packages directory,
583,A Concurrency Memory Model for Python,
579,Refactoring C functions and methods,
576,Rationalize Built-in function classes,
581,Using GitHub Issues for CPython,
577,Augmented Assignment Expressions,
578,Python Runtime Audit Hooks,
575,Unifying function/method classes,
574,Pickle protocol 5 with out-of-band data,
573,Module State Access from C Extension Methods,
572,Assignment Expressions,
568,Generator-sensitivity for Context Variables,
569,Python 3.8 Release Schedule,
567,Context Variables,
570,Python Positional-Only Parameters,
571,The manylinux2010 Platform Tag,
562,Module __getattr__ and __dir__,
566,Metadata for Python Software Packages 2.1,
564,Add new time functions with nanosecond resolution,
563,Postponed Evaluation of Annotations,
565,Show DeprecationWarning in __main__,
560,Core support for typing module and generic types,
561,Distributing and Packaging Type Information,
559,Built-in noop(),
558,Defined semantics for locals(),
556,Threaded garbage collection,
555,Context-local variables (contextvars),
552,Deterministic pycs,
549,Instance Descriptors,
551,Security transparency in the Python runtime,
554,Multiple Interpreters in the Stdlib,
553,Built-in breakpoint(),
547,Running extension modules using the -m option,
550,Execution Context,
548,More Flexible Loop Control,
545,Python Documentation Translations,
557,Data Classes,
546,Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,
544,Protocols: Structural subtyping (static duck typing),
543,A Unified TLS API for Python,
540,Add a new UTF-8 Mode,
542,Dot Notation Assignment In Function Header,
539,A New C-API for Thread-Local Storage in CPython,
538,Coercing the legacy C locale to a UTF-8 based locale,
535,Rich comparison chaining,
534,Improved Errors for Missing Standard Library Modules,
533,Deterministic cleanup for iterators,
536,Final Grammar for Literal String Interpolation,
537,Python 3.7 Release Schedule,
541,Package Index Name Retention,
529,Change Windows filesystem encoding to UTF-8,
532,A circuit breaking protocol and binary operators,
531,Existence checking operators,
530,Asynchronous Comprehensions,
527,Removing Un(der)used file types/extensions on PyPI,
528,Change Windows console encoding to UTF-8,
525,Asynchronous Generators,
523,Adding a frame evaluation API to CPython,
524,Make os.urandom() blocking on Linux,
520,Preserving Class Attribute Definition Order,
521,Managing global context via ‘with’ blocks in generators and coroutines,
519,Adding a file system path protocol,
518,Specifying Minimum Build System Requirements for Python Projects,
526,Syntax for Variable Annotations,
522,Allow BlockingIOError in security sensitive APIs,
515,Underscores in Numeric Literals,
514,Python registration in the Windows registry,
517,A build-system independent format for source trees,
516,Build system abstraction for pip/conda etc,
512,Migrating from hg.python.org to GitHub,
511,API for code transformers,
513,A Platform Tag for Portable Linux Built Distributions,
509,Add a private version to dict,
510,Specialize functions with guards,
508,Dependency specification for Python Software Packages,
507,Migrate CPython to Git and GitLab,
503,Simple Repository API,
502,String Interpolation - Extended Discussion,
500,A protocol for delegating datetime methods to their tzinfo implementations,
504,Using the System RNG by default,
505,None-aware operators,
497,A standard mechanism for backward compatibility,
501,General purpose string interpolation,
506,Adding A Secrets Module To The Standard Library,
498,Literal String Interpolation,
496,Environment Markers,
499,,
495,Local Time Disambiguation,
494,Python 3.6 Release Schedule,
493,HTTPS verification migration tools for Python 2.7,
491,The Wheel Binary Package Format 1.9,
492,Coroutines with async and await syntax,
486,Make the Python Launcher aware of virtual environments,
487,Simpler customisation of class creation,
490,Chain exceptions at C level,
489,Multi-phase extension module initialization,
485,A Function for testing approximate equality,
484,Type Hints,
481,"Migrate CPython to Git, Github, and Phabricator",
488,Elimination of PYO files,
482,Literature Overview for Type Hints,
483,The Theory of Type Hints,
480,Surviving a Compromise of PyPI: End-to-end signing of packages,
479,Change StopIteration handling inside generators,
477,Backport ensurepip (PEP 453) to Python 2.7,
478,Python 3.5 Release Schedule,
475,Retry system calls failing with EINTR,
476,Enabling certificate verification by default for stdlib http clients,
473,Adding structured data to built-in exceptions,
474,Creating forge.python.org,
468,Preserving the order of **kwargs in a function.,
471,os.scandir() function – a better and faster directory iterator,
469,Migration of dict iteration code to Python 3,
466,Network Security Enhancements for Python 2.7.x,
467,Minor API improvements for binary sequences,
470,Removing External Hosting Support on PyPI,
472,Support for indexing with keyword arguments,
464,Removal of the PyPI Mirror Authenticity API,
463,Exception-catching expressions,
465,A dedicated infix operator for matrix multiplication,
460,Add binary interpolation and formatting,
457,Notation For Positional-Only Parameters,
461,Adding % formatting to bytes and bytearray,
462,Core development workflow automation for CPython,
459,Standard Metadata Extensions for Python Software Packages,
452,API for Cryptographic Hash Functions v2.0,
455,Adding a key-transforming dictionary to collections,
458,Secure PyPI downloads with signed repository metadata,
450,Adding A Statistics Module To The Standard Library,
456,Secure and interchangeable hash algorithm,
449,Removal of the PyPI Mirror Auto Discovery and Naming Scheme,
454,Add a new tracemalloc module to trace Python memory allocations,
451,A ModuleSpec Type for the Import System,
448,Additional Unpacking Generalizations,
453,Explicit bootstrapping of pip in Python installations,
447,Add __getdescriptor__ method to metaclass,
442,Safe object finalization,
444,Python Web3 Interface,
445,Add new APIs to customize Python memory allocators,
446,Make newly created file descriptors non-inheritable,
439,Inclusion of implicit pip bootstrap in Python installation,
443,Single-dispatch generic functions,
441,Improving Python ZIP Application Support,
437,"A DSL for specifying signatures, annotations and argument converters",
434,IDLE Enhancement Exception for All Branches,
435,Adding an Enum type to the Python standard library,
440,Version Identification and Dependency Specification,
438,Transitioning to release-file hosting on PyPI,
436,The Argument Clinic DSL,
433,Easier suppression of file descriptor inheritance,
432,Restructuring the CPython startup sequence,
431,Time zone support improvements,
429,Python 3.4 Release Schedule,
430,Migrating to Python 3 as the default online documentation,
428,The pathlib module – object-oriented filesystem paths,
427,The Wheel Binary Package Format 1.0,
424,A method for exposing a length hint,
425,Compatibility Tags for Built Distributions,
426,Metadata for Python Software Packages 2.0,
423,Naming conventions and recipes related to packaging,
422,Simpler customisation of class creation,
420,Implicit Namespace Packages,
417,Including mock in the Standard Library,
421,Adding sys.implementation,
419,Protecting cleanup statements from interruptions,
415,Implement context suppression with exception attributes,
416,Add a frozendict builtin type,
418,"Add monotonic time, performance counter, and process time functions",
414,Explicit Unicode Literal for Python 3.3,
411,Provisional packages in the Python standard library,
412,Key-Sharing Dictionary,
413,Faster evolution of the Python Standard Library,
409,Suppressing exception context,
408,Standard library __preview__ package,
407,New release cycle and introducing long-term support versions,
410,Use decimal.Decimal type for timestamps,
406,Improved Encapsulation of Import State,
403,General purpose decorator clause (aka “@in” clause),
401,BDFL Retirement,
404,Python 2.8 Un-release Schedule,
405,Python Virtual Environments,
400,Deprecate codecs.StreamReader and codecs.StreamWriter,
398,Python 3.3 Release Schedule,
399,Pure Python/C Accelerator Module Compatibility Requirements,
396,Module Version Numbers,
392,Python 3.2 Release Schedule,
393,Flexible String Representation,
402,Simplified Package Layout and Partitioning,
395,Qualified Names for Modules,
394,The “python” Command on Unix-Like Systems,
386,Changing the version comparison module in Distutils,
391,Dictionary-Based Configuration For Logging,
387,Backwards Compatibility Policy,
389,argparse - New Command Line Parsing Module,
385,Migrating from Subversion to Mercurial,
390,Static metadata for Distutils,
383,Non-decodable Bytes in System Character Interfaces,
384,Defining a Stable ABI,
381,Mirroring infrastructure for PyPI,
380,Syntax for Delegating to a Subgenerator,
375,Python 3.1 Release Schedule,
382,Namespace Packages,
379,Adding an Assignment Expression,
397,Python launcher for Windows,
378,Format Specifier for Thousands Separator,
373,Python 2.7 Release Schedule,
376,Database of Installed Python Distributions,
377,Allow __enter__() methods to skip the statement body,
371,Addition of the multiprocessing package to the standard library,
372,Adding an ordered dictionary to collections,
374,Choosing a distributed VCS for the Python project,
370,Per user site-packages directory,
369,Post import hooks,
367,New Super,
366,Main module explicit relative imports,
365,Adding the pkg_resources module,
368,Standard image protocol and class,
362,Function Signature Object,
363,Syntax For Dynamic Attribute Access,
360,Externally Maintained Packages,
364,Transitioning to the Py3K Standard Library,
361,Python 2.6 and 3.0 Release Schedule,
357,Allowing Any Object to be Used for Slicing,
359,The “make” Statement,
356,Python 2.5 Release Schedule,
354,Enumerations in Python,
355,Path - Object oriented filesystem paths,
353,Using ssize_t as the index type,
358,The “bytes” Object,
349,Allow str() to return unicode strings,
351,The freeze protocol,
352,Required Superclass for Exceptions,
345,Metadata for Python Software Packages 1.2,
347,Migrating the Python CVS to Subversion,
348,Exception Reorganization for Python 3.0,
346,User Defined (”,
350,Codetags,
341,Unifying try-except and try-finally,
342,Coroutines via Enhanced Generators,
344,Exception Chaining and Embedded Tracebacks,
343,The “with” Statement,
339,Design of the CPython Compiler,
337,Logging Usage in the Standard Library,
340,Anonymous Block Statements,
338,Executing modules as scripts,
336,Make None Callable,
334,Simple Coroutines via SuspendIteration,
335,Overloadable Boolean Operators,
332,Byte vectors and String/Unicode Unification,
331,Locale-Independent Float/String Conversions,
330,Python Bytecode Verification,
333,Python Web Server Gateway Interface v1.0,
328,Imports: Multi-Line and Absolute/Relative,
325,Resource-Release Support for Generators,
327,Decimal Data Type,
329,Treating Builtins as Constants in the Standard Library,
324,subprocess - New process module,
326,A Case for Top and Bottom Values,
321,Date/Time Parsing and Formatting,
323,Copyable Iterators,
322,Reverse Iteration,
320,Python 2.4 Release Schedule,
318,Decorators for Functions and Methods,
319,Python Synchronize/Asynchronize Block,
317,Eliminate Implicit Exception Instantiation,
312,Simple Implicit Lambda,
313,Adding Roman Numeral Literals to Python,
315,Enhanced While Loop,
314,Metadata for Python Software Packages 1.1,
310,Reliable Acquisition/Release Pairs,
311,Simplified Global Interpreter Lock Acquisition for Extensions,
316,Programming by Contract for Python,
307,Extensions to the pickle protocol,
309,Partial Function Application,
308,Conditional Expressions,
304,Controlling Generation of Bytecode Files,
305,CSV File API,
306,How to Change Python’s Grammar,
303,Extend divmod() for Multiple Divisors,
302,New Import Hooks,
301,Package Index and Metadata for Distutils,Either “success” or “fail”.
299,Special __main__() function in modules,
298,The Locked Buffer Interface,
297,Support for System Upgrades,
294,Type Names in the types Module,
295,Interpretation of multiline string constants,
296,Adding a bytes Object Type,
291,Backward Compatibility for the Python 2 Standard Library,
293,Codec Error Handling Callbacks,
292,Simpler String Substitutions,
290,Code Migration and Modernization,
289,Generator Expressions,
288,Generators Attributes and Exceptions,
286,Enhanced Argument Tuples,
285,Adding a bool type,
287,reStructuredText Docstring Format,
283,Python 2.3 Release Schedule,
284,Integer for-loops,
282,A Logging System,
278,Universal Newline Support,
279,The enumerate() built-in function,
280,Optimizing access to globals,
281,Loop Counter Iteration with range and xrange,
277,Unicode file name support for Windows NT,
271,Prefixing sys.path by command line option,
273,Import Modules from Zip Archives,
272,API for Block Encryption Algorithms v1.0,
274,Dict Comprehensions,
275,Switching on Multiple Values,
270,uniq method for list objects,
268,Extended HTTP functionality and WebDAV,
276,Simple Iterator for ints,
267,Optimized Access to Module Namespaces,
269,Pgen Module for Python,
266,Optimizing Global Variable/Attribute Access,
265,Sorting Dictionaries by Value,
261,Support for “wide” Unicode characters,
262,A Database of Installed Python Packages,
260,Simplify xrange(),
264,Future statements in simulated shells,
263,Defining Python Source Code Encodings,
259,Omit printing newline after newline,
257,Docstring Conventions,
258,Docutils Design Specification,
256,Docstring Processing System Framework,
254,Making Classes Look More Like Types,
255,Simple Generators,
253,Subtyping Built-in Types,
251,Python 2.2 Release Schedule,
248,Python Database API Specification v1.0,
252,Making Types Look More Like Classes,
250,Using site-packages on Windows,
247,API for Cryptographic Hash Functions,
249,Python Database API Specification v2.0,
245,Python Interface Syntax,
246,Object Adaptation,
244,The,
243,Module Repository Upload Mechanism,
242,Numeric Kinds,
241,Metadata for Python Software Packages,
240,Adding a Rational Literal to Python,
239,Adding a Rational Type to Python,
237,Unifying Long Integers and Integers,
238,Changing the Division Operator,
235,Import on Case-Insensitive Platforms,
236,Back to the __future__,
234,Iterators,
233,Python Online Help,
231,__findattr__(),
230,Warning Framework,
228,Reworking Python’s Numeric Model,
232,Function Attributes,
229,Using Distutils to Build Python,
225,Elementwise/Objectwise Operators,
226,Python 2.1 Release Schedule,
224,Attribute Docstrings,
227,Statically Nested Scopes,
223,Change the Meaning of,
221,Import As,
222,Web Library Enhancements,
218,Adding a Built-In Set Object Type,
217,Display Hook for Interactive Use,
219,Stackless Python,
220,"Coroutines, Generators, Continuations",
216,Docstring Format,
214,Extended Print Statement,
212,Loop Counter Iteration,
213,Attribute Access Handlers,
215,String Interpolation,
210,Decoupling the Interpreter Loop,
211,Adding A New Outer Product Operator,
208,Reworking the Coercion Model,
209,Multi-dimensional Arrays,
207,Rich Comparisons,
9,Sample Plaintext PEP Template,
204,Range Literals,
206,Python Advanced Library,
203,Augmented Assignments,
205,Weak References,
7,Style Guide for C Code,
4,Deprecation of Standard Modules,
6,Bug Fix Releases,
3,Guidelines for Handling Bug Reports,
5,Guidelines for Language Evolution,
8,Style Guide for Python Code,
